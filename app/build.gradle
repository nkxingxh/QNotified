import java.lang.reflect.InvocationTargetException
import java.nio.file.Paths

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

def signingFilePath = 'signing.gradle'
def performSigning = file(signingFilePath).exists()
if (performSigning) {
    apply from: signingFilePath
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    ndkVersion "21.4.7075529"
    defaultConfig {
        applicationId "nil.nadph.qnotified"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode(getTimeStamp.call() as int)
        // versionName format: major.minor.accumulation.commit_id
        versionName "0.8.18" + (getGitHeadRefsSuffix.call() as String)
        multiDexEnabled false
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            //drop "mips" , 'armeabi',
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    if (performSigning) {
        signingConfigs {
            release {
                storeFile file(project.signing.storeFilePath)
                storePassword project.signing.storePassword
                keyAlias project.signing.keyAlias
                keyPassword project.signing.keyPassword
                v1SigningEnabled true
                v2SigningEnabled true
            }
        }
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (performSigning) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    aaptOptions {
        additionalParameters '--allow-reserved-package-id', '--package-id', '0x75'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    // Encapsulates your external native build configurations.
    externalNativeBuild {
        // Encapsulates your CMake build configurations.
        cmake {
            // Provides a relative path to your CMake build script.
            path "src/main/jni/CMakeLists.txt"
            version "3.10.2"
        }
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    compileOnly fileTree(include: ['*.jar'], dir: 'lib')
    compileOnly project(":stub")
    implementation project(":annotations")
    compileOnly project(":compiler")
    kapt project(":compiler")
    compileOnly 'de.robv.android.xposed:api:82'
    implementation 'com.flyco.tablayout:FlycoTabLayout_Lib:2.2.0'
    implementation 'com.jaredrummler:colorpicker:1.1.0'
    implementation 'de.psdev.licensesdialog:licensesdialog:2.1.0'
    implementation 'io.noties.markwon:core:4.5.1'
    testImplementation 'junit:junit:4.13'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"
    // 脚本解析
    implementation 'org.apache-extras.beanshell:bsh:2.0b6'
    // androidx
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.material:material:1.4.0-alpha02'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.afollestad.material-dialogs:core:3.3.0'
    implementation 'com.afollestad.material-dialogs:input:3.3.0'
    implementation 'com.tencent:mmkv-static:1.2.7'
}

dependencies {
    def appCenterSdkVersion = '3.3.0'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.4'
    def room_version = "2.2.6"

    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    def lifecycle_version = "2.3.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
}

def _execDexTail = { String dexPath ->
    URLClassLoader cl = new URLClassLoader(Paths.get(rootProject.projectDir.absolutePath, "libs", "dex-ptm", "build", "classes", "java", "main").toUri().toURL())
    try {
        byte[] time = cl.loadClass("cc.ioctl.dextail.HexUtils").getMethod("getTimeAsByteArray").invoke(null) as byte[]
        PrintStream stdout = System.out
        boolean result = cl.loadClass("cc.ioctl.dextail.Main").getMethod("checkAndUpdateTail", String.class, byte[].class, boolean.class, PrintStream.class)
            .invoke(null, dexPath, time, true, stdout)
        return result
    } catch (InvocationTargetException ie) {
        throw ie.cause
    }
}

task dexTailDebug {
    doLast {
        println("dexTailDebug.doLast invoked");
        ArrayList<File> pathList = new ArrayList<>();
        //3.6.x, plain
        String tmp_path = "intermediates/dex/debug/out/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        File tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        //3.6.x, minify
        tmp_path = "intermediates/dex/debug/shrunkDex/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        //4.0.x single
        tmp_path = "intermediates/dex/debug/mergeDexDebug/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        //4.0.x minify
        tmp_path = "intermediates/dex/debug/minifyDebugWithR8/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        //end
        if (pathList.size() == 0) {
            throw new RuntimeException("dex not found: we only support 3.6.x, 4.0.x and 4.1.x");
        }
        for (File f : pathList) {
            if (!_execDexTail(f.getAbsolutePath())) {
                throw new RuntimeException("DedxTail returned false");
            }
        }
    }
}

task dexTailRelease {
    doLast {
        println("dexTailRelease.doLast invoked")
        ArrayList<File> pathList = new ArrayList<>();
        //3.6.x single?
        String tmp_path = "intermediates/dex/release/out/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        File tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        //3.6.x, minify
        tmp_path = "intermediates/dex/release/shrunkDex/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        //4.0.x single
        tmp_path = "intermediates/dex/release/mergeDexRelease/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        //4.0.x minify
        tmp_path = "intermediates/dex/release/minifyReleaseWithR8/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        //end
        if (pathList.size() == 0) {
            throw new RuntimeException("dex not found: we only support 3.6.x, 4.0.x and 4.1.x");
        }
        for (File f : pathList) {
            if (!_execDexTail(f.getAbsolutePath())) {
                throw new RuntimeException("DedxTail returned false");
            }
        }
    }
}

dexTailDebug.dependsOn(":dex-ptm:assemble")
dexTailRelease.dependsOn(":dex-ptm:assemble")

task replaceIcon(type: Copy) {
    delete 'src/main/res/drawable.png'
    def random = new Random()
    def iconsFileDir = file("MiStyleIcons/")
    def fileCount = iconsFileDir.listFiles().length
    def number = random.nextInt(fileCount)
    def iconFile = iconsFileDir.listFiles()[number]
    println iconFile
    from iconFile
    into "src/main/res/drawable/"
    rename { String fileName ->
        "icon.png"
    }
}

task checkTargetNativeLibsDebug {
    doLast {
        String[] targetAbi = ["arm64-v8a", "armeabi-v7a"]
        String soName = "libnatives.so"
        String libPath = "app/build/intermediates/cmake/debug/obj";
        for (String abi : targetAbi) {
            String tmp_path = libPath + "/" + abi + "/" + soName
            if ("/" != File.separator) {
                tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
            }
            File f = new File(rootProject.projectDir, tmp_path)
            if (!f.exists()) {
                throw new IllegalStateException("Native library missing for the target abi: " + abi
                    +".\nPlease run gradle task ':app:externalNativeBuildDebug' manually to " +
                        "force android gradle plugin to satisfy all required ABIs.")
            }
        }
    }
}
checkTargetNativeLibsDebug.dependsOn ":app:externalNativeBuildDebug"
task checkTargetNativeLibsRelease {
    doLast {
        String[] targetAbi = ["arm64-v8a", "armeabi-v7a"]
        String soName = "libnatives.so"
        String libPath = "app/build/intermediates/cmake/release/obj";
        for (String abi : targetAbi) {
            String tmp_path = libPath + "/" + abi + "/" + soName
            if ("/" != File.separator) {
                tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
            }
            File f = new File(rootProject.projectDir, tmp_path)
            if (!f.exists()) {
                throw new IllegalStateException("Native library missing for the target abi: " + abi
                    +".\nPlease run gradle task ':app:externalNativeBuildRelease' manually to " +
                        "force android gradle plugin to satisfy all required ABIs.")
            }
        }
    }
}
checkTargetNativeLibsRelease.dependsOn ":app:externalNativeBuildRelease"

preBuild.dependsOn replaceIcon

tasks.whenTaskAdded { t ->
    if (t.name == 'assembleDebug') {
        t.dependsOn dexTailDebug
    }
    if (t.name == 'mergeDexDebug') {
        dexTailDebug.dependsOn t
    }
    if (t.name == 'stripDebugDebugSymbols') {
        dexTailDebug.mustRunAfter(t)
    }
    if (t.name == 'dexBuilderDebug' || t.name == 'mergeExtDexDebug'
        || t.name == 'mergeLibDexDebug' || t.name == 'mergeProjectDexDebug'
        || t.name == 'shrinkDebugRes' || t.name.startsWith('minifyDebug')) {
        dexTailDebug.mustRunAfter(t)
    }
    if (t.name == 'assembleRelease') {
        t.dependsOn dexTailRelease
    }
    if (t.name == 'mergeDexRelease') {
        dexTailRelease.dependsOn t
    }
    if (t.name == 'stripReleaseDebugSymbols') {
        dexTailRelease.mustRunAfter(t)
    }
    if (t.name == 'dexBuilderRelease' || t.name == 'mergeExtDexRelease'
        || t.name == 'mergeLibDexRelease' || t.name == 'mergeProjectDexRelease'
        || t.name == 'shrinkReleaseRes' || t.name.startsWith('minifyRelease')) {
        dexTailRelease.mustRunAfter(t)
    }
    if (t.name == 'packageDebug') {
        t.dependsOn checkTargetNativeLibsDebug
    }
    if (t.name == 'packageRelease') {
        t.dependsOn checkTargetNativeLibsRelease
    }
}
